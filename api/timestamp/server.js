 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

// if (!process.env.DISABLE_XORIGIN) {
//   app.use(function(req, res, next) {
//     var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
//     var origin = req.headers.origin || '*';
//     if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
//          console.log(origin);
//          res.setHeader('Access-Control-Allow-Origin', origin);
//          res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
//     }
//     next();
//   });
// }

app.use('/public', express.static(process.cwd() + '/public'));

// app.route('/_api/package.json')
//   .get(function(req, res, next) {
//     console.log('requested');
//     fs.readFile(__dirname + '/package.json', function(err, data) {
//       if(err) return next(err);
//       res.type('txt').send(data.toString());
//     });
//   });

var months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
var Months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  

app.get('/', function(req, res) {
  res.sendFile(process.cwd() + '/views/index.html');
});

app.get('/:date', function(req, res) {
  var time = req.params.date.split(" ");
  var date = {};
  
  
  if(Number(time)>=0 && Number(time)<=2147483648){
    
    var t = new Date(0);
    t.setSeconds(Number(time));
    
    date.natural = [Months[t.getMonth()], String(t.getDay()+1) + ",", t.getFullYear()].join(' ');
    date.unix = time[0];
    
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(date));
    
  } else if((months.indexOf(time[0].toLowerCase())>-1) && (Number(time[1].split(",")[0])>=0 || Number(time[1].split(",")[0])<0) && time[1].length<4 && (Number(time[2])>=0 || Number(time[2])<0) && time[2].length==4){
    
    date.natural = [Months[months.indexOf(time[0].toLowerCase())], time[1], time[2]].join(" ");
    date.unix = Date.UTC(time[2],String(months.indexOf(time[0])+1),time[1].split(",")[0],'1','1','1');
    
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(date));
    
  } else {
    
    date.natural = null;
    date.unix = null;
    
    res.setHeader('Content-Type', 'application/json')
    res.end(JSON.stringify(date))
    
  }
  
});


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .send(err.message || 'SERVER ERROR');
  }  
})




app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

